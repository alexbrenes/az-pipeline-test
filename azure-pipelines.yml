trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    sudo apt -y install cppcheck npm php php-xml && npm install -g handlebars
  displayName: 'Install script dependencies and Cppcheck'

- script: |
    git clone https://github.com/alexbrenes/vulnerable-code.git $HOME/vulnerable-code
  displayName: 'Clone repository'

- script: |
    mkdir $HOME/results
    cppcheck --xml-version=2 --enable=all . --output-file=$HOME/results/cppcheck-result.xml
  workingDirectory: $(HOME)/vulnerable-code
  displayName: 'Scan the repository'

- script: |
    export FILE=$HOME/results/cppcheck-result.xml
    php -r 'print(json_encode(simplexml_load_string(file_get_contents(getenv("FILE")), "SimpleXMLElement", LIBXML_NOCDATA)));' > $HOME/results/cppcheck-result.json
    tr -d '@' < $HOME/results/cppcheck-result.json > /tmp/cppcheck-result.json
    echo <<EOF > /tmp/nunit-template.hbs
    <test-run
      id="2"
      name="Cppcheck test"
      start-time="SCAN DATETIME">
              {{#each errors.error}}
              <test-case
                      id="{{attributes.id}}"
                      severity="{{attributes.severity}}"
                      msg="{{attributes.msg}}"
                      verbose="{{attributes.verbose}}"
                      cwe="{{attributes.cwe}}"
                      file0="{{attributes.file0}}"
                      result="Failed"
                      time="1">
                      <location file="{{location.attributes.file}}" line="{{location.attributes.line}}" column="{{location.attributes.column}}"/>
              </test-case>
              {{/each}}
    </test-run>
    EOF
    handlebars /tmp/cppcheck-report.json < /tmp/nunit-template.hbs > $HOME/results/nunit-cppcheck-report.x
  displayName: 'Convert to NUnit'

- script: |
    cat $HOME/results/nunit-cppcheck-report.xml
  displayName: 'Reading the NUnit results'