trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    sudo apt -y install cppcheck npm php php-xml && npm install -g handlebars-cmd
  displayName: 'Install script dependencies and Cppcheck'

- script: |
    git clone https://github.com/alexbrenes/vulnerable-code.git $HOME/vulnerable-code
  displayName: 'Clone repository'

- script: |
    mkdir $HOME/results
    cppcheck --xml-version=2 --enable=all --suppress=missingIncludeSystem . --output-file=$HOME/results/cppcheck-result.xml
  workingDirectory: $(HOME)/vulnerable-code
  displayName: 'Scan the repository'

- script: |
    export FILE=$HOME/results/cppcheck-result.xml
    php -r 'print(json_encode(simplexml_load_string(file_get_contents(getenv("FILE")), "SimpleXMLElement", LIBXML_NOCDATA)));' > $HOME/results/cppcheck-result.json
    tr -d '@' < $HOME/results/cppcheck-result.json > /tmp/cppcheck-result.json
    cat <<EOF > /tmp/junit-template.hbs
    <?xml version="1.0" encoding="UTF-8"?>
    <testsuites>
        <testsuite name="Cppcheck">
          {{#each errors.error}}
          <testcase name="{{location.attributes.file}}:{{attributes.id}}" classname="Cppcheck error" time="1.0">
              <failure message="{{attributes.msg}}" type="error:{{attributes.id}}">{{location.attributes.file}}:{{location.attributes.line}}:{{location.attributes.column}}: {{attributes.verbose}}</failure>
          </testcase>
          {{/each}}
        </testsuite>
        <testsuite name="Test Placeholder">
          <testcase name="testPlaceholder" classname="placeholder" time="1.0" />
        </testsuite>
    </testsuites>
    EOF
    mkdir /tmp/results
    handlebars /tmp/cppcheck-result.json < /tmp/junit-template.hbs > /tmp/results/junit-cppcheck-result.xml
  displayName: 'Convert to JUnit'

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '/tmp/results/junit-cppcheck-result.xml'